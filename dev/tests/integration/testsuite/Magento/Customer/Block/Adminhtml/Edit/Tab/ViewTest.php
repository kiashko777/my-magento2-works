<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

namespace Magento\Customer\Block\Adminhtml\Edit\Tab;

use Magento\Backend\Block\Template\Context;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Customer\Api\Data\CustomerInterface;
use Magento\Customer\Api\Data\CustomerInterfaceFactory;
use Magento\Customer\Controller\RegistryConstants;
use Magento\Framework\ObjectManagerInterface;
use Magento\Framework\Reflection\DataObjectProcessor;
use Magento\Framework\Registry;
use Magento\Framework\View\LayoutInterface;
use Magento\Store\Model\StoreManager;
use Magento\Store\Model\StoreManagerInterface;
use Magento\TestFramework\Helper\Bootstrap;
use PHPUnit\Framework\TestCase;

/**
 * Magento\Customer\Block\Adminhtml\Edit\Tab\View
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 * @magentoAppArea Adminhtml
 */
class ViewTest extends TestCase
{
    /** @var  Context */
    private $_context;

    /** @var  Registry */
    private $_coreRegistry;

    /** @var  CustomerDataBuilder */
    private $_customerFactory;

    /** @var  CustomerRepositoryInterface */
    private $_customerRepository;

    /** @var StoreManagerInterface */
    private $_storeManager;

    /** @var ObjectManagerInterface */
    private $_objectManager;

    /** @var DataObjectProcessor */
    private $_dataObjectProcessor;

    /** @var  View */
    private $_block;

    public function testGetTabLabel()
    {
        $this->assertEquals(__('Customer View'), $this->_block->getTabLabel());
    }

    public function testGetTabTitle()
    {
        $this->assertEquals(__('Customer View'), $this->_block->getTabTitle());
    }

    /**
     * @magentoDataFixture Magento/Customer/_files/customer.php
     */
    public function testCanShowTab()
    {
        $this->_loadCustomer();
        $this->assertTrue($this->_block->canShowTab());
    }

    /**
     * @return CustomerInterface
     */
    private function _loadCustomer()
    {
        /** @var CustomerInterface $customer */
        $customer = $this->_customerRepository->getById(1);
        $data = ['account' => $this->_dataObjectProcessor
            ->buildOutputDataArray($customer, CustomerInterface::class),];
        $this->_context->getBackendSession()->setCustomerData($data);
        $this->_coreRegistry->register(RegistryConstants::CURRENT_CUSTOMER_ID, $customer->getId());
        return $customer;
    }

    public function testCanShowTabNot()
    {
        $this->_createCustomer();
        $this->assertFalse($this->_block->canShowTab());
    }

    /**
     * @return CustomerInterface
     */
    private function _createCustomer()
    {
        /** @var CustomerInterface $customer */
        $customer = $this->_customerFactory->create()->setFirstname(
            'firstname'
        )->setLastname(
            'lastname'
        )->setEmail(
            'email@email.com'
        );
        $data = ['account' => $this->_dataObjectProcessor
            ->buildOutputDataArray($customer, CustomerInterface::class),];
        $this->_context->getBackendSession()->setCustomerData($data);
        return $customer;
    }

    /**
     * @magentoDataFixture Magento/Customer/_files/customer.php
     */
    public function testIsHiddenNot()
    {
        $this->_loadCustomer();
        $this->assertFalse($this->_block->isHidden());
    }

    public function testIsHidden()
    {
        $this->_createCustomer();
        $this->assertTrue($this->_block->isHidden());
    }

    protected function setUp(): void
    {
        $this->_objectManager = Bootstrap::getObjectManager();

        $this->_storeManager = $this->_objectManager->get(StoreManager::class);
        $this->_context = $this->_objectManager->get(
            Context::class,
            ['storeManager' => $this->_storeManager]
        );

        $this->_customerFactory = $this->_objectManager->get(
            CustomerInterfaceFactory::class
        );
        $this->_coreRegistry = $this->_objectManager->get(Registry::class);
        $this->_customerRepository = $this->_objectManager->get(
            CustomerRepositoryInterface::class
        );
        $this->_dataObjectProcessor = $this->_objectManager->get(
            DataObjectProcessor::class
        );

        $this->_block = $this->_objectManager->get(
            LayoutInterface::class
        )->createBlock(
            View::class,
            '',
            [
                'context' => $this->_context,
                'registry' => $this->_coreRegistry
            ]
        );
    }

    protected function tearDown(): void
    {
        $this->_coreRegistry->unregister(RegistryConstants::CURRENT_CUSTOMER_ID);
    }

    protected function dataToString($data)
    {
        return parent::dataToString($data); // TODO: Change the autogenerated stub
    }
}
